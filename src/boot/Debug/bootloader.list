
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002838  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002a1c  08002a1c  00003a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a48  08002a48  00005000  2**0
                  CONTENTS
  4 .ARM          00000000  08002a48  08002a48  00005000  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a48  08002a48  00005000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a48  08002a48  00003a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a4c  08002a4c  00003a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .hwid         00000004  08003ffc  08003ffc  00004ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .bss          00000100  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007bca  00000000  00000000  00005029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001869  00000000  00000000  0000cbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0000e460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055a  00000000  00000000  0000eb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181d0  00000000  00000000  0000f0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009112  00000000  00000000  00027292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cf7a  00000000  00000000  000303a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bd31e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b2c  00000000  00000000  000bd364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000bee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002a04 	.word	0x08002a04

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002a04 	.word	0x08002a04

08000224 <IsNewProgramAvailable>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool IsNewProgramAvailable(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	return false;
 8000228:	2300      	movs	r3, #0
}
 800022a:	4618      	mov	r0, r3
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
	...

08000234 <jump_to_application>:

void jump_to_application(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800023a:	b672      	cpsid	i
}
 800023c:	bf00      	nop
	extern pFunction Jump_To_Application_Function;
	extern uint32_t JumpAddress;

    __disable_irq();
    if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000) // check stack pointer in the SRAM address
 800023e:	4b0f      	ldr	r3, [pc, #60]	@ (800027c <jump_to_application+0x48>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b0f      	ldr	r3, [pc, #60]	@ (8000280 <jump_to_application+0x4c>)
 8000244:	4013      	ands	r3, r2
 8000246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800024a:	d112      	bne.n	8000272 <jump_to_application+0x3e>
    {
      /* Jump to user application */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 800024c:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <jump_to_application+0x50>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <jump_to_application+0x54>)
 8000252:	6013      	str	r3, [r2, #0]
      Jump_To_Application_Function = (pFunction) JumpAddress;
 8000254:	4b0c      	ldr	r3, [pc, #48]	@ (8000288 <jump_to_application+0x54>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	461a      	mov	r2, r3
 800025a:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <jump_to_application+0x58>)
 800025c:	601a      	str	r2, [r3, #0]

      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 800025e:	4b07      	ldr	r3, [pc, #28]	@ (800027c <jump_to_application+0x48>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f383 8808 	msr	MSP, r3
}
 800026a:	bf00      	nop

      /* Jump to application */
      Jump_To_Application_Function();
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <jump_to_application+0x58>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4798      	blx	r3
    }
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	08004000 	.word	0x08004000
 8000280:	2ffe0000 	.word	0x2ffe0000
 8000284:	08004004 	.word	0x08004004
 8000288:	20000104 	.word	0x20000104
 800028c:	20000100 	.word	0x20000100

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  const size_t FLASH_APP_SIZE = (FLASH_SIZE - (APPLICATION_ADDRESS - FLASH_BASE) - sizeof(uint32_t));
 8000296:	4b2f      	ldr	r3, [pc, #188]	@ (8000354 <main+0xc4>)
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800029e:	4293      	cmp	r3, r2
 80002a0:	d008      	beq.n	80002b4 <main+0x24>
 80002a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000354 <main+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	029a      	lsls	r2, r3, #10
 80002a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000358 <main+0xc8>)
 80002aa:	4013      	ands	r3, r2
 80002ac:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80002b0:	3b04      	subs	r3, #4
 80002b2:	e000      	b.n	80002b6 <main+0x26>
 80002b4:	4b29      	ldr	r3, [pc, #164]	@ (800035c <main+0xcc>)
 80002b6:	60fb      	str	r3, [r7, #12]
  uint32_t uwCRCValue = 0 ;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002bc:	f000 fae2 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c0:	f000 f854 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c4:	f000 f8fe 	bl	80004c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80002c8:	f000 f8d6 	bl	8000478 <MX_DMA_Init>
  MX_CRC_Init();
 80002cc:	f000 f894 	bl	80003f8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80002d0:	f000 f8a6 	bl	8000420 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // AES_init_ctx_iv(&aesCtx, (const uint8_t*) fwInfo->aes.key, (const uint8_t*) fwInfo->aes.iv);
     uint32_t appCRC = 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	607b      	str	r3, [r7, #4]
  do {

   	  LED2_ON();
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002de:	4820      	ldr	r0, [pc, #128]	@ (8000360 <main+0xd0>)
 80002e0:	f001 f9e6 	bl	80016b0 <HAL_GPIO_WritePin>
   	  LED3_ON();
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002ea:	481d      	ldr	r0, [pc, #116]	@ (8000360 <main+0xd0>)
 80002ec:	f001 f9e0 	bl	80016b0 <HAL_GPIO_WritePin>
   	  LED4_ON();
 80002f0:	2201      	movs	r2, #1
 80002f2:	2101      	movs	r1, #1
 80002f4:	481b      	ldr	r0, [pc, #108]	@ (8000364 <main+0xd4>)
 80002f6:	f001 f9db 	bl	80016b0 <HAL_GPIO_WritePin>

   	  if ( IsNewProgramAvailable()) {
 80002fa:	f7ff ff93 	bl	8000224 <IsNewProgramAvailable>
   		// BootloadResult(Intel_BootLoader(&aesCtx));
   	  }

   	  LED2_OFF();
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000304:	4816      	ldr	r0, [pc, #88]	@ (8000360 <main+0xd0>)
 8000306:	f001 f9d3 	bl	80016b0 <HAL_GPIO_WritePin>
   	  LED3_OFF();
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000310:	4813      	ldr	r0, [pc, #76]	@ (8000360 <main+0xd0>)
 8000312:	f001 f9cd 	bl	80016b0 <HAL_GPIO_WritePin>
   	  LED4_OFF();
 8000316:	2200      	movs	r2, #0
 8000318:	2101      	movs	r1, #1
 800031a:	4812      	ldr	r0, [pc, #72]	@ (8000364 <main+0xd4>)
 800031c:	f001 f9c8 	bl	80016b0 <HAL_GPIO_WritePin>

   	  appCRC = (*(__IO uint32_t*)ADDR_FLASH_CRC);
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <main+0xc4>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000328:	4293      	cmp	r3, r2
 800032a:	d008      	beq.n	800033e <main+0xae>
 800032c:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <main+0xc4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	029a      	lsls	r2, r3, #10
 8000332:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <main+0xc8>)
 8000334:	4013      	ands	r3, r2
 8000336:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800033a:	3b04      	subs	r3, #4
 800033c:	e000      	b.n	8000340 <main+0xb0>
 800033e:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <main+0xd8>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	607b      	str	r3, [r7, #4]
   	  //CRC_INPUTDATA_FORMAT_WORDS
   	 // uwCRCValue =  HAL_CRC_Calculate(&hcrc, (uint32_t*) APPLICATION_ADDRESS, FLASH_APP_SIZE / 4);

  } while(appCRC != uwCRCValue);//(uwCRCValue != appCRCValue);
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	429a      	cmp	r2, r3
 800034a:	d1c5      	bne.n	80002d8 <main+0x48>
  jump_to_application();
 800034c:	f7ff ff72 	bl	8000234 <jump_to_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <main+0xc0>
 8000354:	1ffff7e0 	.word	0x1ffff7e0
 8000358:	03fffc00 	.word	0x03fffc00
 800035c:	0001bffc 	.word	0x0001bffc
 8000360:	40011c00 	.word	0x40011c00
 8000364:	40012000 	.word	0x40012000
 8000368:	0801fffc 	.word	0x0801fffc

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b090      	sub	sp, #64	@ 0x40
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	2228      	movs	r2, #40	@ 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fb16 	bl	80029ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038e:	2301      	movs	r3, #1
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000392:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039c:	2301      	movs	r3, #1
 800039e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003aa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b0:	f107 0318 	add.w	r3, r7, #24
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 f993 	bl	80016e0 <HAL_RCC_OscConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c0:	f000 f8ec 	bl	800059c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c4:	230f      	movs	r3, #15
 80003c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c8:	2302      	movs	r3, #2
 80003ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fc00 	bl	8001be4 <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ea:	f000 f8d7 	bl	800059c <Error_Handler>
  }
}
 80003ee:	bf00      	nop
 80003f0:	3740      	adds	r7, #64	@ 0x40
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
void MX_CRC_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_CRC_Init+0x20>)
 80003fe:	4a07      	ldr	r2, [pc, #28]	@ (800041c <MX_CRC_Init+0x24>)
 8000400:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <MX_CRC_Init+0x20>)
 8000404:	f000 fbad 	bl	8000b62 <HAL_CRC_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800040e:	f000 f8c5 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000028 	.word	0x20000028
 800041c:	40023000 	.word	0x40023000

08000420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000424:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 8000426:	4a13      	ldr	r2, [pc, #76]	@ (8000474 <MX_USART2_UART_Init+0x54>)
 8000428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800042a:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 800042c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0d      	ldr	r3, [pc, #52]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 800045c:	f001 fd50 	bl	8001f00 <HAL_MultiProcessor_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000466:	f000 f899 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000030 	.word	0x20000030
 8000474:	40004400 	.word	0x40004400

08000478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800047e:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <MX_DMA_Init+0x48>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <MX_DMA_Init+0x48>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b0d      	ldr	r3, [pc, #52]	@ (80004c0 <MX_DMA_Init+0x48>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	2010      	movs	r0, #16
 800049c:	f000 fb2b 	bl	8000af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004a0:	2010      	movs	r0, #16
 80004a2:	f000 fb44 	bl	8000b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	2011      	movs	r0, #17
 80004ac:	f000 fb23 	bl	8000af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004b0:	2011      	movs	r0, #17
 80004b2:	f000 fb3c 	bl	8000b2e <HAL_NVIC_EnableIRQ>

}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000590 <MX_GPIO_Init+0xcc>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000590 <MX_GPIO_Init+0xcc>)
 80004de:	f043 0310 	orr.w	r3, r3, #16
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000590 <MX_GPIO_Init+0xcc>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0310 	and.w	r3, r3, #16
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b27      	ldr	r3, [pc, #156]	@ (8000590 <MX_GPIO_Init+0xcc>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a26      	ldr	r2, [pc, #152]	@ (8000590 <MX_GPIO_Init+0xcc>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b24      	ldr	r3, [pc, #144]	@ (8000590 <MX_GPIO_Init+0xcc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000508:	4b21      	ldr	r3, [pc, #132]	@ (8000590 <MX_GPIO_Init+0xcc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a20      	ldr	r2, [pc, #128]	@ (8000590 <MX_GPIO_Init+0xcc>)
 800050e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_GPIO_Init+0xcc>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000520:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_GPIO_Init+0xcc>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a1a      	ldr	r2, [pc, #104]	@ (8000590 <MX_GPIO_Init+0xcc>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <MX_GPIO_Init+0xcc>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000534:	603b      	str	r3, [r7, #0]
 8000536:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800053e:	4815      	ldr	r0, [pc, #84]	@ (8000594 <MX_GPIO_Init+0xd0>)
 8000540:	f001 f8b6 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2101      	movs	r1, #1
 8000548:	4813      	ldr	r0, [pc, #76]	@ (8000598 <MX_GPIO_Init+0xd4>)
 800054a:	f001 f8b1 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 800054e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	480b      	ldr	r0, [pc, #44]	@ (8000594 <MX_GPIO_Init+0xd0>)
 8000568:	f000 ff0e 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800056c:	2301      	movs	r3, #1
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2302      	movs	r3, #2
 800057a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_GPIO_Init+0xd4>)
 8000584:	f000 ff00 	bl	8001388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	40011c00 	.word	0x40011c00
 8000598:	40012000 	.word	0x40012000

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <Error_Handler+0x8>

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <HAL_MspInit+0x5c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000604 <HAL_MspInit+0x5c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <HAL_MspInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <HAL_MspInit+0x60>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000

0800060c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <HAL_CRC_MspInit+0x34>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d10b      	bne.n	8000636 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <HAL_CRC_MspInit+0x38>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <HAL_CRC_MspInit+0x38>)
 8000624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_CRC_MspInit+0x38>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	40023000 	.word	0x40023000
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a46      	ldr	r2, [pc, #280]	@ (800077c <HAL_UART_MspInit+0x134>)
 8000664:	4293      	cmp	r3, r2
 8000666:	f040 8084 	bne.w	8000772 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800066a:	4b45      	ldr	r3, [pc, #276]	@ (8000780 <HAL_UART_MspInit+0x138>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a44      	ldr	r2, [pc, #272]	@ (8000780 <HAL_UART_MspInit+0x138>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b42      	ldr	r3, [pc, #264]	@ (8000780 <HAL_UART_MspInit+0x138>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b3f      	ldr	r3, [pc, #252]	@ (8000780 <HAL_UART_MspInit+0x138>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a3e      	ldr	r2, [pc, #248]	@ (8000780 <HAL_UART_MspInit+0x138>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b3c      	ldr	r3, [pc, #240]	@ (8000780 <HAL_UART_MspInit+0x138>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800069a:	2304      	movs	r3, #4
 800069c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4619      	mov	r1, r3
 80006ac:	4835      	ldr	r0, [pc, #212]	@ (8000784 <HAL_UART_MspInit+0x13c>)
 80006ae:	f000 fe6b 	bl	8001388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b2:	2308      	movs	r3, #8
 80006b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	482f      	ldr	r0, [pc, #188]	@ (8000784 <HAL_UART_MspInit+0x13c>)
 80006c6:	f000 fe5f 	bl	8001388 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80006ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000788 <HAL_UART_MspInit+0x140>)
 80006cc:	4a2f      	ldr	r2, [pc, #188]	@ (800078c <HAL_UART_MspInit+0x144>)
 80006ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <HAL_UART_MspInit+0x140>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <HAL_UART_MspInit+0x140>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <HAL_UART_MspInit+0x140>)
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006e2:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <HAL_UART_MspInit+0x140>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <HAL_UART_MspInit+0x140>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80006ee:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <HAL_UART_MspInit+0x140>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006f4:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <HAL_UART_MspInit+0x140>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80006fa:	4823      	ldr	r0, [pc, #140]	@ (8000788 <HAL_UART_MspInit+0x140>)
 80006fc:	f000 fa4e 	bl	8000b9c <HAL_DMA_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8000706:	f7ff ff49 	bl	800059c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a1e      	ldr	r2, [pc, #120]	@ (8000788 <HAL_UART_MspInit+0x140>)
 800070e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000710:	4a1d      	ldr	r2, [pc, #116]	@ (8000788 <HAL_UART_MspInit+0x140>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000716:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <HAL_UART_MspInit+0x148>)
 8000718:	4a1e      	ldr	r2, [pc, #120]	@ (8000794 <HAL_UART_MspInit+0x14c>)
 800071a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800071c:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <HAL_UART_MspInit+0x148>)
 800071e:	2210      	movs	r2, #16
 8000720:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <HAL_UART_MspInit+0x148>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <HAL_UART_MspInit+0x148>)
 800072a:	2280      	movs	r2, #128	@ 0x80
 800072c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <HAL_UART_MspInit+0x148>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <HAL_UART_MspInit+0x148>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <HAL_UART_MspInit+0x148>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <HAL_UART_MspInit+0x148>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000746:	4812      	ldr	r0, [pc, #72]	@ (8000790 <HAL_UART_MspInit+0x148>)
 8000748:	f000 fa28 	bl	8000b9c <HAL_DMA_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000752:	f7ff ff23 	bl	800059c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <HAL_UART_MspInit+0x148>)
 800075a:	639a      	str	r2, [r3, #56]	@ 0x38
 800075c:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <HAL_UART_MspInit+0x148>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2026      	movs	r0, #38	@ 0x26
 8000768:	f000 f9c5 	bl	8000af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800076c:	2026      	movs	r0, #38	@ 0x26
 800076e:	f000 f9de 	bl	8000b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40004400 	.word	0x40004400
 8000780:	40021000 	.word	0x40021000
 8000784:	40010800 	.word	0x40010800
 8000788:	20000078 	.word	0x20000078
 800078c:	4002006c 	.word	0x4002006c
 8000790:	200000bc 	.word	0x200000bc
 8000794:	40020080 	.word	0x40020080

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <NMI_Handler+0x4>

080007a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <MemManage_Handler+0x4>

080007b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <UsageFault_Handler+0x4>

080007c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 f892 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007f4:	4802      	ldr	r0, [pc, #8]	@ (8000800 <DMA1_Channel6_IRQHandler+0x10>)
 80007f6:	f000 fb8b 	bl	8000f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000078 	.word	0x20000078

08000804 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000808:	4802      	ldr	r0, [pc, #8]	@ (8000814 <DMA1_Channel7_IRQHandler+0x10>)
 800080a:	f000 fb81 	bl	8000f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000bc 	.word	0x200000bc

08000818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <USART2_IRQHandler+0x10>)
 800081e:	f001 fbe3 	bl	8001fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000030 	.word	0x20000030

0800082c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000838:	f7ff fff8 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480b      	ldr	r0, [pc, #44]	@ (800086c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800083e:	490c      	ldr	r1, [pc, #48]	@ (8000870 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000854:	4c09      	ldr	r4, [pc, #36]	@ (800087c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f002 f8ab 	bl	80029bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000866:	f7ff fd13 	bl	8000290 <main>
  bx lr
 800086a:	4770      	bx	lr
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000874:	08002a50 	.word	0x08002a50
  ldr r2, =_sbss
 8000878:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800087c:	2000010c 	.word	0x2000010c

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_Init+0x28>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_Init+0x28>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f923 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff fe82 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f93b 	bl	8000b4a <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 f903 	bl	8000af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	@ (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a03      	ldr	r2, [pc, #12]	@ (8000930 <HAL_IncTick+0x20>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000008 	.word	0x20000008
 8000930:	20000108 	.word	0x20000108

08000934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	@ (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000108 	.word	0x20000108

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4906      	ldr	r1, [pc, #24]	@ (80009e0 <__NVIC_EnableIRQ+0x34>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	@ (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	@ (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	@ 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	@ 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f7ff ff90 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff2d 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff42 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff90 	bl	8000a38 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5f 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff35 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffa2 	bl	8000a9c <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e00e      	b.n	8000b92 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d105      	bne.n	8000b8a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fd41 	bl	800060c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e059      	b.n	8000c66 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <HAL_DMA_Init+0xd4>)
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d80f      	bhi.n	8000bde <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c74 <HAL_DMA_Init+0xd8>)
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8000c78 <HAL_DMA_Init+0xdc>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	009a      	lsls	r2, r3, #2
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a28      	ldr	r2, [pc, #160]	@ (8000c7c <HAL_DMA_Init+0xe0>)
 8000bda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bdc:	e00e      	b.n	8000bfc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <HAL_DMA_Init+0xe4>)
 8000be6:	4413      	add	r3, r2
 8000be8:	4a23      	ldr	r2, [pc, #140]	@ (8000c78 <HAL_DMA_Init+0xdc>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	091b      	lsrs	r3, r3, #4
 8000bf0:	009a      	lsls	r2, r3, #2
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a22      	ldr	r2, [pc, #136]	@ (8000c84 <HAL_DMA_Init+0xe8>)
 8000bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2202      	movs	r2, #2
 8000c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000c12:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40020407 	.word	0x40020407
 8000c74:	bffdfff8 	.word	0xbffdfff8
 8000c78:	cccccccd 	.word	0xcccccccd
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	bffdfbf8 	.word	0xbffdfbf8
 8000c84:	40020400 	.word	0x40020400

08000c88 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d008      	beq.n	8000cb2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e020      	b.n	8000cf4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 020e 	bic.w	r2, r2, #14
 8000cc0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0201 	bic.w	r2, r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
	...

08000d00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d005      	beq.n	8000d24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e0d6      	b.n	8000ed2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 020e 	bic.w	r2, r2, #14
 8000d32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b64      	ldr	r3, [pc, #400]	@ (8000edc <HAL_DMA_Abort_IT+0x1dc>)
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d958      	bls.n	8000e02 <HAL_DMA_Abort_IT+0x102>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a62      	ldr	r2, [pc, #392]	@ (8000ee0 <HAL_DMA_Abort_IT+0x1e0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d04f      	beq.n	8000dfa <HAL_DMA_Abort_IT+0xfa>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a61      	ldr	r2, [pc, #388]	@ (8000ee4 <HAL_DMA_Abort_IT+0x1e4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d048      	beq.n	8000df6 <HAL_DMA_Abort_IT+0xf6>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a5f      	ldr	r2, [pc, #380]	@ (8000ee8 <HAL_DMA_Abort_IT+0x1e8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d040      	beq.n	8000df0 <HAL_DMA_Abort_IT+0xf0>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a5e      	ldr	r2, [pc, #376]	@ (8000eec <HAL_DMA_Abort_IT+0x1ec>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d038      	beq.n	8000dea <HAL_DMA_Abort_IT+0xea>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8000ef0 <HAL_DMA_Abort_IT+0x1f0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d030      	beq.n	8000de4 <HAL_DMA_Abort_IT+0xe4>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a5b      	ldr	r2, [pc, #364]	@ (8000ef4 <HAL_DMA_Abort_IT+0x1f4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d028      	beq.n	8000dde <HAL_DMA_Abort_IT+0xde>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a52      	ldr	r2, [pc, #328]	@ (8000edc <HAL_DMA_Abort_IT+0x1dc>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d020      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0xd8>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a57      	ldr	r2, [pc, #348]	@ (8000ef8 <HAL_DMA_Abort_IT+0x1f8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d019      	beq.n	8000dd4 <HAL_DMA_Abort_IT+0xd4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a55      	ldr	r2, [pc, #340]	@ (8000efc <HAL_DMA_Abort_IT+0x1fc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d012      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0xd0>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a54      	ldr	r2, [pc, #336]	@ (8000f00 <HAL_DMA_Abort_IT+0x200>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d00a      	beq.n	8000dca <HAL_DMA_Abort_IT+0xca>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a52      	ldr	r2, [pc, #328]	@ (8000f04 <HAL_DMA_Abort_IT+0x204>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d102      	bne.n	8000dc4 <HAL_DMA_Abort_IT+0xc4>
 8000dbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc2:	e01b      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000dc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc8:	e018      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000dca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dce:	e015      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	e013      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e011      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000dd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ddc:	e00e      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000dde:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000de2:	e00b      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000de4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000de8:	e008      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dee:	e005      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df4:	e002      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000df6:	2310      	movs	r3, #16
 8000df8:	e000      	b.n	8000dfc <HAL_DMA_Abort_IT+0xfc>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4a42      	ldr	r2, [pc, #264]	@ (8000f08 <HAL_DMA_Abort_IT+0x208>)
 8000dfe:	6053      	str	r3, [r2, #4]
 8000e00:	e057      	b.n	8000eb2 <HAL_DMA_Abort_IT+0x1b2>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a36      	ldr	r2, [pc, #216]	@ (8000ee0 <HAL_DMA_Abort_IT+0x1e0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d04f      	beq.n	8000eac <HAL_DMA_Abort_IT+0x1ac>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a34      	ldr	r2, [pc, #208]	@ (8000ee4 <HAL_DMA_Abort_IT+0x1e4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d048      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0x1a8>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a33      	ldr	r2, [pc, #204]	@ (8000ee8 <HAL_DMA_Abort_IT+0x1e8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d040      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x1a2>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a31      	ldr	r2, [pc, #196]	@ (8000eec <HAL_DMA_Abort_IT+0x1ec>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d038      	beq.n	8000e9c <HAL_DMA_Abort_IT+0x19c>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a30      	ldr	r2, [pc, #192]	@ (8000ef0 <HAL_DMA_Abort_IT+0x1f0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d030      	beq.n	8000e96 <HAL_DMA_Abort_IT+0x196>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef4 <HAL_DMA_Abort_IT+0x1f4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d028      	beq.n	8000e90 <HAL_DMA_Abort_IT+0x190>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a26      	ldr	r2, [pc, #152]	@ (8000edc <HAL_DMA_Abort_IT+0x1dc>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d020      	beq.n	8000e8a <HAL_DMA_Abort_IT+0x18a>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ef8 <HAL_DMA_Abort_IT+0x1f8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_DMA_Abort_IT+0x186>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a29      	ldr	r2, [pc, #164]	@ (8000efc <HAL_DMA_Abort_IT+0x1fc>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d012      	beq.n	8000e82 <HAL_DMA_Abort_IT+0x182>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a27      	ldr	r2, [pc, #156]	@ (8000f00 <HAL_DMA_Abort_IT+0x200>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00a      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x17c>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a26      	ldr	r2, [pc, #152]	@ (8000f04 <HAL_DMA_Abort_IT+0x204>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d102      	bne.n	8000e76 <HAL_DMA_Abort_IT+0x176>
 8000e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e74:	e01b      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000e76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e7a:	e018      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e80:	e015      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000e82:	2310      	movs	r3, #16
 8000e84:	e013      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e011      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000e8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e8e:	e00e      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000e90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e94:	e00b      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000e96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e9a:	e008      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea0:	e005      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000ea2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea6:	e002      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	e000      	b.n	8000eae <HAL_DMA_Abort_IT+0x1ae>
 8000eac:	2301      	movs	r3, #1
 8000eae:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <HAL_DMA_Abort_IT+0x20c>)
 8000eb0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	4798      	blx	r3
    } 
  }
  return status;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40020080 	.word	0x40020080
 8000ee0:	40020008 	.word	0x40020008
 8000ee4:	4002001c 	.word	0x4002001c
 8000ee8:	40020030 	.word	0x40020030
 8000eec:	40020044 	.word	0x40020044
 8000ef0:	40020058 	.word	0x40020058
 8000ef4:	4002006c 	.word	0x4002006c
 8000ef8:	40020408 	.word	0x40020408
 8000efc:	4002041c 	.word	0x4002041c
 8000f00:	40020430 	.word	0x40020430
 8000f04:	40020444 	.word	0x40020444
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40020000 	.word	0x40020000

08000f10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80f1 	beq.w	800111c <HAL_DMA_IRQHandler+0x20c>
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80eb 	beq.w	800111c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d107      	bne.n	8000f64 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0204 	bic.w	r2, r2, #4
 8000f62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80010e8 <HAL_DMA_IRQHandler+0x1d8>)
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d958      	bls.n	8001022 <HAL_DMA_IRQHandler+0x112>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a5d      	ldr	r2, [pc, #372]	@ (80010ec <HAL_DMA_IRQHandler+0x1dc>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d04f      	beq.n	800101a <HAL_DMA_IRQHandler+0x10a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a5c      	ldr	r2, [pc, #368]	@ (80010f0 <HAL_DMA_IRQHandler+0x1e0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d048      	beq.n	8001016 <HAL_DMA_IRQHandler+0x106>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a5a      	ldr	r2, [pc, #360]	@ (80010f4 <HAL_DMA_IRQHandler+0x1e4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d040      	beq.n	8001010 <HAL_DMA_IRQHandler+0x100>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a59      	ldr	r2, [pc, #356]	@ (80010f8 <HAL_DMA_IRQHandler+0x1e8>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d038      	beq.n	800100a <HAL_DMA_IRQHandler+0xfa>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a57      	ldr	r2, [pc, #348]	@ (80010fc <HAL_DMA_IRQHandler+0x1ec>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d030      	beq.n	8001004 <HAL_DMA_IRQHandler+0xf4>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a56      	ldr	r2, [pc, #344]	@ (8001100 <HAL_DMA_IRQHandler+0x1f0>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d028      	beq.n	8000ffe <HAL_DMA_IRQHandler+0xee>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a4d      	ldr	r2, [pc, #308]	@ (80010e8 <HAL_DMA_IRQHandler+0x1d8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d020      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0xe8>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a52      	ldr	r2, [pc, #328]	@ (8001104 <HAL_DMA_IRQHandler+0x1f4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d019      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0xe4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a50      	ldr	r2, [pc, #320]	@ (8001108 <HAL_DMA_IRQHandler+0x1f8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d012      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0xe0>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a4f      	ldr	r2, [pc, #316]	@ (800110c <HAL_DMA_IRQHandler+0x1fc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d00a      	beq.n	8000fea <HAL_DMA_IRQHandler+0xda>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8001110 <HAL_DMA_IRQHandler+0x200>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d102      	bne.n	8000fe4 <HAL_DMA_IRQHandler+0xd4>
 8000fde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fe2:	e01b      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 8000fe4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000fe8:	e018      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 8000fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fee:	e015      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 8000ff0:	2340      	movs	r3, #64	@ 0x40
 8000ff2:	e013      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e011      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 8000ff8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000ffc:	e00e      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 8000ffe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001002:	e00b      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 8001004:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001008:	e008      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 800100a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800100e:	e005      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 8001010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001014:	e002      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 8001016:	2340      	movs	r3, #64	@ 0x40
 8001018:	e000      	b.n	800101c <HAL_DMA_IRQHandler+0x10c>
 800101a:	2304      	movs	r3, #4
 800101c:	4a3d      	ldr	r2, [pc, #244]	@ (8001114 <HAL_DMA_IRQHandler+0x204>)
 800101e:	6053      	str	r3, [r2, #4]
 8001020:	e057      	b.n	80010d2 <HAL_DMA_IRQHandler+0x1c2>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a31      	ldr	r2, [pc, #196]	@ (80010ec <HAL_DMA_IRQHandler+0x1dc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d04f      	beq.n	80010cc <HAL_DMA_IRQHandler+0x1bc>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <HAL_DMA_IRQHandler+0x1e0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d048      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x1b8>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a2e      	ldr	r2, [pc, #184]	@ (80010f4 <HAL_DMA_IRQHandler+0x1e4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d040      	beq.n	80010c2 <HAL_DMA_IRQHandler+0x1b2>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a2c      	ldr	r2, [pc, #176]	@ (80010f8 <HAL_DMA_IRQHandler+0x1e8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d038      	beq.n	80010bc <HAL_DMA_IRQHandler+0x1ac>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a2b      	ldr	r2, [pc, #172]	@ (80010fc <HAL_DMA_IRQHandler+0x1ec>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d030      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x1a6>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a29      	ldr	r2, [pc, #164]	@ (8001100 <HAL_DMA_IRQHandler+0x1f0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d028      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x1a0>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a21      	ldr	r2, [pc, #132]	@ (80010e8 <HAL_DMA_IRQHandler+0x1d8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d020      	beq.n	80010aa <HAL_DMA_IRQHandler+0x19a>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <HAL_DMA_IRQHandler+0x1f4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_DMA_IRQHandler+0x196>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a24      	ldr	r2, [pc, #144]	@ (8001108 <HAL_DMA_IRQHandler+0x1f8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d012      	beq.n	80010a2 <HAL_DMA_IRQHandler+0x192>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a22      	ldr	r2, [pc, #136]	@ (800110c <HAL_DMA_IRQHandler+0x1fc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00a      	beq.n	800109c <HAL_DMA_IRQHandler+0x18c>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <HAL_DMA_IRQHandler+0x200>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d102      	bne.n	8001096 <HAL_DMA_IRQHandler+0x186>
 8001090:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001094:	e01b      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 8001096:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800109a:	e018      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 800109c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a0:	e015      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 80010a2:	2340      	movs	r3, #64	@ 0x40
 80010a4:	e013      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e011      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 80010aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80010ae:	e00e      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 80010b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010b4:	e00b      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 80010b6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80010ba:	e008      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 80010bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010c0:	e005      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 80010c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010c6:	e002      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 80010c8:	2340      	movs	r3, #64	@ 0x40
 80010ca:	e000      	b.n	80010ce <HAL_DMA_IRQHandler+0x1be>
 80010cc:	2304      	movs	r3, #4
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <HAL_DMA_IRQHandler+0x208>)
 80010d0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8136 	beq.w	8001348 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010e4:	e130      	b.n	8001348 <HAL_DMA_IRQHandler+0x438>
 80010e6:	bf00      	nop
 80010e8:	40020080 	.word	0x40020080
 80010ec:	40020008 	.word	0x40020008
 80010f0:	4002001c 	.word	0x4002001c
 80010f4:	40020030 	.word	0x40020030
 80010f8:	40020044 	.word	0x40020044
 80010fc:	40020058 	.word	0x40020058
 8001100:	4002006c 	.word	0x4002006c
 8001104:	40020408 	.word	0x40020408
 8001108:	4002041c 	.word	0x4002041c
 800110c:	40020430 	.word	0x40020430
 8001110:	40020444 	.word	0x40020444
 8001114:	40020400 	.word	0x40020400
 8001118:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	2202      	movs	r2, #2
 8001122:	409a      	lsls	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80dd 	beq.w	80012e8 <HAL_DMA_IRQHandler+0x3d8>
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80d7 	beq.w	80012e8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10b      	bne.n	8001160 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 020a 	bic.w	r2, r2, #10
 8001156:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b7b      	ldr	r3, [pc, #492]	@ (8001354 <HAL_DMA_IRQHandler+0x444>)
 8001168:	429a      	cmp	r2, r3
 800116a:	d958      	bls.n	800121e <HAL_DMA_IRQHandler+0x30e>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a79      	ldr	r2, [pc, #484]	@ (8001358 <HAL_DMA_IRQHandler+0x448>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d04f      	beq.n	8001216 <HAL_DMA_IRQHandler+0x306>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a78      	ldr	r2, [pc, #480]	@ (800135c <HAL_DMA_IRQHandler+0x44c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d048      	beq.n	8001212 <HAL_DMA_IRQHandler+0x302>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a76      	ldr	r2, [pc, #472]	@ (8001360 <HAL_DMA_IRQHandler+0x450>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d040      	beq.n	800120c <HAL_DMA_IRQHandler+0x2fc>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a75      	ldr	r2, [pc, #468]	@ (8001364 <HAL_DMA_IRQHandler+0x454>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d038      	beq.n	8001206 <HAL_DMA_IRQHandler+0x2f6>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a73      	ldr	r2, [pc, #460]	@ (8001368 <HAL_DMA_IRQHandler+0x458>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d030      	beq.n	8001200 <HAL_DMA_IRQHandler+0x2f0>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a72      	ldr	r2, [pc, #456]	@ (800136c <HAL_DMA_IRQHandler+0x45c>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d028      	beq.n	80011fa <HAL_DMA_IRQHandler+0x2ea>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a69      	ldr	r2, [pc, #420]	@ (8001354 <HAL_DMA_IRQHandler+0x444>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d020      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x2e4>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001370 <HAL_DMA_IRQHandler+0x460>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d019      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x2e0>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a6c      	ldr	r2, [pc, #432]	@ (8001374 <HAL_DMA_IRQHandler+0x464>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d012      	beq.n	80011ec <HAL_DMA_IRQHandler+0x2dc>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a6b      	ldr	r2, [pc, #428]	@ (8001378 <HAL_DMA_IRQHandler+0x468>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d00a      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x2d6>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a69      	ldr	r2, [pc, #420]	@ (800137c <HAL_DMA_IRQHandler+0x46c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d102      	bne.n	80011e0 <HAL_DMA_IRQHandler+0x2d0>
 80011da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011de:	e01b      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 80011e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011e4:	e018      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 80011e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ea:	e015      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 80011ec:	2320      	movs	r3, #32
 80011ee:	e013      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e011      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 80011f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011f8:	e00e      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 80011fa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011fe:	e00b      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 8001200:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001204:	e008      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 8001206:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800120a:	e005      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 800120c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001210:	e002      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 8001212:	2320      	movs	r3, #32
 8001214:	e000      	b.n	8001218 <HAL_DMA_IRQHandler+0x308>
 8001216:	2302      	movs	r3, #2
 8001218:	4a59      	ldr	r2, [pc, #356]	@ (8001380 <HAL_DMA_IRQHandler+0x470>)
 800121a:	6053      	str	r3, [r2, #4]
 800121c:	e057      	b.n	80012ce <HAL_DMA_IRQHandler+0x3be>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a4d      	ldr	r2, [pc, #308]	@ (8001358 <HAL_DMA_IRQHandler+0x448>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d04f      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x3b8>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a4b      	ldr	r2, [pc, #300]	@ (800135c <HAL_DMA_IRQHandler+0x44c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d048      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x3b4>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <HAL_DMA_IRQHandler+0x450>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d040      	beq.n	80012be <HAL_DMA_IRQHandler+0x3ae>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a48      	ldr	r2, [pc, #288]	@ (8001364 <HAL_DMA_IRQHandler+0x454>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d038      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x3a8>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a47      	ldr	r2, [pc, #284]	@ (8001368 <HAL_DMA_IRQHandler+0x458>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d030      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x3a2>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a45      	ldr	r2, [pc, #276]	@ (800136c <HAL_DMA_IRQHandler+0x45c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d028      	beq.n	80012ac <HAL_DMA_IRQHandler+0x39c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a3d      	ldr	r2, [pc, #244]	@ (8001354 <HAL_DMA_IRQHandler+0x444>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d020      	beq.n	80012a6 <HAL_DMA_IRQHandler+0x396>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a41      	ldr	r2, [pc, #260]	@ (8001370 <HAL_DMA_IRQHandler+0x460>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x392>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a40      	ldr	r2, [pc, #256]	@ (8001374 <HAL_DMA_IRQHandler+0x464>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d012      	beq.n	800129e <HAL_DMA_IRQHandler+0x38e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a3e      	ldr	r2, [pc, #248]	@ (8001378 <HAL_DMA_IRQHandler+0x468>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00a      	beq.n	8001298 <HAL_DMA_IRQHandler+0x388>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a3d      	ldr	r2, [pc, #244]	@ (800137c <HAL_DMA_IRQHandler+0x46c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d102      	bne.n	8001292 <HAL_DMA_IRQHandler+0x382>
 800128c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001290:	e01b      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 8001292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001296:	e018      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 8001298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800129c:	e015      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 800129e:	2320      	movs	r3, #32
 80012a0:	e013      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e011      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 80012a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012aa:	e00e      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 80012ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80012b0:	e00b      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 80012b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012b6:	e008      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 80012b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012bc:	e005      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 80012be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012c2:	e002      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 80012c4:	2320      	movs	r3, #32
 80012c6:	e000      	b.n	80012ca <HAL_DMA_IRQHandler+0x3ba>
 80012c8:	2302      	movs	r3, #2
 80012ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001384 <HAL_DMA_IRQHandler+0x474>)
 80012cc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d034      	beq.n	8001348 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012e6:	e02f      	b.n	8001348 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	2208      	movs	r2, #8
 80012ee:	409a      	lsls	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d028      	beq.n	800134a <HAL_DMA_IRQHandler+0x43a>
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d023      	beq.n	800134a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 020e 	bic.w	r2, r2, #14
 8001310:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	4798      	blx	r3
    }
  }
  return;
 8001348:	bf00      	nop
 800134a:	bf00      	nop
}
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40020080 	.word	0x40020080
 8001358:	40020008 	.word	0x40020008
 800135c:	4002001c 	.word	0x4002001c
 8001360:	40020030 	.word	0x40020030
 8001364:	40020044 	.word	0x40020044
 8001368:	40020058 	.word	0x40020058
 800136c:	4002006c 	.word	0x4002006c
 8001370:	40020408 	.word	0x40020408
 8001374:	4002041c 	.word	0x4002041c
 8001378:	40020430 	.word	0x40020430
 800137c:	40020444 	.word	0x40020444
 8001380:	40020400 	.word	0x40020400
 8001384:	40020000 	.word	0x40020000

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b08b      	sub	sp, #44	@ 0x2c
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139a:	e179      	b.n	8001690 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800139c:	2201      	movs	r2, #1
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f040 8168 	bne.w	800168a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4a96      	ldr	r2, [pc, #600]	@ (8001618 <HAL_GPIO_Init+0x290>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d05e      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013c4:	4a94      	ldr	r2, [pc, #592]	@ (8001618 <HAL_GPIO_Init+0x290>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d875      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013ca:	4a94      	ldr	r2, [pc, #592]	@ (800161c <HAL_GPIO_Init+0x294>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d058      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013d0:	4a92      	ldr	r2, [pc, #584]	@ (800161c <HAL_GPIO_Init+0x294>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d86f      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013d6:	4a92      	ldr	r2, [pc, #584]	@ (8001620 <HAL_GPIO_Init+0x298>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d052      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013dc:	4a90      	ldr	r2, [pc, #576]	@ (8001620 <HAL_GPIO_Init+0x298>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d869      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013e2:	4a90      	ldr	r2, [pc, #576]	@ (8001624 <HAL_GPIO_Init+0x29c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d04c      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001624 <HAL_GPIO_Init+0x29c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d863      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013ee:	4a8e      	ldr	r2, [pc, #568]	@ (8001628 <HAL_GPIO_Init+0x2a0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d046      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013f4:	4a8c      	ldr	r2, [pc, #560]	@ (8001628 <HAL_GPIO_Init+0x2a0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d85d      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013fa:	2b12      	cmp	r3, #18
 80013fc:	d82a      	bhi.n	8001454 <HAL_GPIO_Init+0xcc>
 80013fe:	2b12      	cmp	r3, #18
 8001400:	d859      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 8001402:	a201      	add	r2, pc, #4	@ (adr r2, 8001408 <HAL_GPIO_Init+0x80>)
 8001404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001408:	08001483 	.word	0x08001483
 800140c:	0800145d 	.word	0x0800145d
 8001410:	0800146f 	.word	0x0800146f
 8001414:	080014b1 	.word	0x080014b1
 8001418:	080014b7 	.word	0x080014b7
 800141c:	080014b7 	.word	0x080014b7
 8001420:	080014b7 	.word	0x080014b7
 8001424:	080014b7 	.word	0x080014b7
 8001428:	080014b7 	.word	0x080014b7
 800142c:	080014b7 	.word	0x080014b7
 8001430:	080014b7 	.word	0x080014b7
 8001434:	080014b7 	.word	0x080014b7
 8001438:	080014b7 	.word	0x080014b7
 800143c:	080014b7 	.word	0x080014b7
 8001440:	080014b7 	.word	0x080014b7
 8001444:	080014b7 	.word	0x080014b7
 8001448:	080014b7 	.word	0x080014b7
 800144c:	08001465 	.word	0x08001465
 8001450:	08001479 	.word	0x08001479
 8001454:	4a75      	ldr	r2, [pc, #468]	@ (800162c <HAL_GPIO_Init+0x2a4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800145a:	e02c      	b.n	80014b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e029      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	3304      	adds	r3, #4
 800146a:	623b      	str	r3, [r7, #32]
          break;
 800146c:	e024      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	3308      	adds	r3, #8
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e01f      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	330c      	adds	r3, #12
 800147e:	623b      	str	r3, [r7, #32]
          break;
 8001480:	e01a      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800148a:	2304      	movs	r3, #4
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e013      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d105      	bne.n	80014a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001498:	2308      	movs	r3, #8
 800149a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	611a      	str	r2, [r3, #16]
          break;
 80014a2:	e009      	b.n	80014b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a4:	2308      	movs	r3, #8
 80014a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	615a      	str	r2, [r3, #20]
          break;
 80014ae:	e003      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          break;
 80014b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2bff      	cmp	r3, #255	@ 0xff
 80014bc:	d801      	bhi.n	80014c2 <HAL_GPIO_Init+0x13a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	e001      	b.n	80014c6 <HAL_GPIO_Init+0x13e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3304      	adds	r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2bff      	cmp	r3, #255	@ 0xff
 80014cc:	d802      	bhi.n	80014d4 <HAL_GPIO_Init+0x14c>
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	e002      	b.n	80014da <HAL_GPIO_Init+0x152>
 80014d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d6:	3b08      	subs	r3, #8
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	210f      	movs	r1, #15
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	401a      	ands	r2, r3
 80014ec:	6a39      	ldr	r1, [r7, #32]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	431a      	orrs	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 80c1 	beq.w	800168a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001508:	4b49      	ldr	r3, [pc, #292]	@ (8001630 <HAL_GPIO_Init+0x2a8>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a48      	ldr	r2, [pc, #288]	@ (8001630 <HAL_GPIO_Init+0x2a8>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b46      	ldr	r3, [pc, #280]	@ (8001630 <HAL_GPIO_Init+0x2a8>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001520:	4a44      	ldr	r2, [pc, #272]	@ (8001634 <HAL_GPIO_Init+0x2ac>)
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a3c      	ldr	r2, [pc, #240]	@ (8001638 <HAL_GPIO_Init+0x2b0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d01f      	beq.n	800158c <HAL_GPIO_Init+0x204>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a3b      	ldr	r2, [pc, #236]	@ (800163c <HAL_GPIO_Init+0x2b4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d019      	beq.n	8001588 <HAL_GPIO_Init+0x200>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a3a      	ldr	r2, [pc, #232]	@ (8001640 <HAL_GPIO_Init+0x2b8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d013      	beq.n	8001584 <HAL_GPIO_Init+0x1fc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a39      	ldr	r2, [pc, #228]	@ (8001644 <HAL_GPIO_Init+0x2bc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00d      	beq.n	8001580 <HAL_GPIO_Init+0x1f8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a38      	ldr	r2, [pc, #224]	@ (8001648 <HAL_GPIO_Init+0x2c0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d007      	beq.n	800157c <HAL_GPIO_Init+0x1f4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a37      	ldr	r2, [pc, #220]	@ (800164c <HAL_GPIO_Init+0x2c4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_GPIO_Init+0x1f0>
 8001574:	2305      	movs	r3, #5
 8001576:	e00a      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001578:	2306      	movs	r3, #6
 800157a:	e008      	b.n	800158e <HAL_GPIO_Init+0x206>
 800157c:	2304      	movs	r3, #4
 800157e:	e006      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001580:	2303      	movs	r3, #3
 8001582:	e004      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001584:	2302      	movs	r3, #2
 8001586:	e002      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_GPIO_Init+0x206>
 800158c:	2300      	movs	r3, #0
 800158e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001590:	f002 0203 	and.w	r2, r2, #3
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	4093      	lsls	r3, r2
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800159e:	4925      	ldr	r1, [pc, #148]	@ (8001634 <HAL_GPIO_Init+0x2ac>)
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	4924      	ldr	r1, [pc, #144]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015c6:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4920      	ldr	r1, [pc, #128]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	491a      	ldr	r1, [pc, #104]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60cb      	str	r3, [r1, #12]
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4916      	ldr	r1, [pc, #88]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d025      	beq.n	8001654 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4910      	ldr	r1, [pc, #64]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
 8001614:	e025      	b.n	8001662 <HAL_GPIO_Init+0x2da>
 8001616:	bf00      	nop
 8001618:	10320000 	.word	0x10320000
 800161c:	10310000 	.word	0x10310000
 8001620:	10220000 	.word	0x10220000
 8001624:	10210000 	.word	0x10210000
 8001628:	10120000 	.word	0x10120000
 800162c:	10110000 	.word	0x10110000
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000
 8001638:	40010800 	.word	0x40010800
 800163c:	40010c00 	.word	0x40010c00
 8001640:	40011000 	.word	0x40011000
 8001644:	40011400 	.word	0x40011400
 8001648:	40011800 	.word	0x40011800
 800164c:	40011c00 	.word	0x40011c00
 8001650:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001654:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	43db      	mvns	r3, r3
 800165c:	4913      	ldr	r1, [pc, #76]	@ (80016ac <HAL_GPIO_Init+0x324>)
 800165e:	4013      	ands	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800166e:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	490e      	ldr	r1, [pc, #56]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
 800167a:	e006      	b.n	800168a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_GPIO_Init+0x324>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	43db      	mvns	r3, r3
 8001684:	4909      	ldr	r1, [pc, #36]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001686:	4013      	ands	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f ae7e 	bne.w	800139c <HAL_GPIO_Init+0x14>
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	372c      	adds	r7, #44	@ 0x2c
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016cc:	e003      	b.n	80016d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ce:	887b      	ldrh	r3, [r7, #2]
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	611a      	str	r2, [r3, #16]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e272      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8087 	beq.w	800180e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001700:	4b92      	ldr	r3, [pc, #584]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b04      	cmp	r3, #4
 800170a:	d00c      	beq.n	8001726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800170c:	4b8f      	ldr	r3, [pc, #572]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x5e>
 8001718:	4b8c      	ldr	r3, [pc, #560]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001724:	d10b      	bne.n	800173e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	4b89      	ldr	r3, [pc, #548]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d06c      	beq.n	800180c <HAL_RCC_OscConfig+0x12c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d168      	bne.n	800180c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e24c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x76>
 8001748:	4b80      	ldr	r3, [pc, #512]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a7f      	ldr	r2, [pc, #508]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e02e      	b.n	80017b4 <HAL_RCC_OscConfig+0xd4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x98>
 800175e:	4b7b      	ldr	r3, [pc, #492]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7a      	ldr	r2, [pc, #488]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b78      	ldr	r3, [pc, #480]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a77      	ldr	r2, [pc, #476]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xd4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0xbc>
 8001782:	4b72      	ldr	r3, [pc, #456]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a71      	ldr	r2, [pc, #452]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b6f      	ldr	r3, [pc, #444]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6e      	ldr	r2, [pc, #440]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xd4>
 800179c:	4b6b      	ldr	r3, [pc, #428]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6a      	ldr	r2, [pc, #424]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b68      	ldr	r3, [pc, #416]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a67      	ldr	r2, [pc, #412]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff f8ba 	bl	8000934 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff f8b6 	bl	8000934 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	@ 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e200      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b5d      	ldr	r3, [pc, #372]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xe4>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff f8a6 	bl	8000934 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff f8a2 	bl	8000934 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	@ 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1ec      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b53      	ldr	r3, [pc, #332]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x10c>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181a:	4b4c      	ldr	r3, [pc, #304]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001826:	4b49      	ldr	r3, [pc, #292]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x18c>
 8001832:	4b46      	ldr	r3, [pc, #280]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b43      	ldr	r3, [pc, #268]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x176>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c0      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4939      	ldr	r1, [pc, #228]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b36      	ldr	r3, [pc, #216]	@ (8001950 <HAL_RCC_OscConfig+0x270>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff f85b 	bl	8000934 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff f857 	bl	8000934 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a1      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4927      	ldr	r1, [pc, #156]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <HAL_RCC_OscConfig+0x270>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff f83a 	bl	8000934 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff f836 	bl	8000934 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e180      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d03a      	beq.n	8001964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d019      	beq.n	800192a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <HAL_RCC_OscConfig+0x274>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7ff f81a 	bl	8000934 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff f816 	bl	8000934 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e160      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001922:	2001      	movs	r0, #1
 8001924:	f000 face 	bl	8001ec4 <RCC_Delay>
 8001928:	e01c      	b.n	8001964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_RCC_OscConfig+0x274>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff f800 	bl	8000934 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001936:	e00f      	b.n	8001958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7fe fffc 	bl	8000934 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d908      	bls.n	8001958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e146      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	42420000 	.word	0x42420000
 8001954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b92      	ldr	r3, [pc, #584]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e9      	bne.n	8001938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a6 	beq.w	8001abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10d      	bne.n	800199e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b88      	ldr	r3, [pc, #544]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a87      	ldr	r2, [pc, #540]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b85      	ldr	r3, [pc, #532]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199a:	2301      	movs	r3, #1
 800199c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b82      	ldr	r3, [pc, #520]	@ (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d118      	bne.n	80019dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a7e      	ldr	r2, [pc, #504]	@ (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b6:	f7fe ffbd 	bl	8000934 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019be:	f7fe ffb9 	bl	8000934 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b64      	cmp	r3, #100	@ 0x64
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e103      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	4b75      	ldr	r3, [pc, #468]	@ (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x312>
 80019e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	e02d      	b.n	8001a4e <HAL_RCC_OscConfig+0x36e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x334>
 80019fa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a69      	ldr	r2, [pc, #420]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6213      	str	r3, [r2, #32]
 8001a06:	4b67      	ldr	r3, [pc, #412]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a66      	ldr	r2, [pc, #408]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0304 	bic.w	r3, r3, #4
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	e01c      	b.n	8001a4e <HAL_RCC_OscConfig+0x36e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d10c      	bne.n	8001a36 <HAL_RCC_OscConfig+0x356>
 8001a1c:	4b61      	ldr	r3, [pc, #388]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a60      	ldr	r2, [pc, #384]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	e00b      	b.n	8001a4e <HAL_RCC_OscConfig+0x36e>
 8001a36:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	4b58      	ldr	r3, [pc, #352]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a57      	ldr	r2, [pc, #348]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d015      	beq.n	8001a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7fe ff6d 	bl	8000934 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7fe ff69 	bl	8000934 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0b1      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0ee      	beq.n	8001a5e <HAL_RCC_OscConfig+0x37e>
 8001a80:	e014      	b.n	8001aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a82:	f7fe ff57 	bl	8000934 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7fe ff53 	bl	8000934 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e09b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	4b40      	ldr	r3, [pc, #256]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ee      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d105      	bne.n	8001abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8087 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac8:	4b36      	ldr	r3, [pc, #216]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d061      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d146      	bne.n	8001b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001adc:	4b33      	ldr	r3, [pc, #204]	@ (8001bac <HAL_RCC_OscConfig+0x4cc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7fe ff27 	bl	8000934 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7fe ff23 	bl	8000934 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e06d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afc:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b10:	d108      	bne.n	8001b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b12:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	4921      	ldr	r1, [pc, #132]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a19      	ldr	r1, [r3, #32]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	430b      	orrs	r3, r1
 8001b36:	491b      	ldr	r1, [pc, #108]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_RCC_OscConfig+0x4cc>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7fe fef7 	bl	8000934 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7fe fef3 	bl	8000934 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e03d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x46a>
 8001b68:	e035      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <HAL_RCC_OscConfig+0x4cc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7fe fee0 	bl	8000934 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7fe fedc 	bl	8000934 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e026      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x498>
 8001b96:	e01e      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e019      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_RCC_OscConfig+0x500>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0d0      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b67      	ldr	r3, [pc, #412]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	4965      	ldr	r1, [pc, #404]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b63      	ldr	r3, [pc, #396]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	4b59      	ldr	r3, [pc, #356]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a58      	ldr	r2, [pc, #352]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c58:	4b53      	ldr	r3, [pc, #332]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c64:	4b50      	ldr	r3, [pc, #320]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	494d      	ldr	r1, [pc, #308]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d040      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	4b41      	ldr	r3, [pc, #260]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e073      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06b      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4936      	ldr	r1, [pc, #216]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd4:	f7fe fe2e 	bl	8000934 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7fe fe2a 	bl	8000934 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e053      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d210      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	4922      	ldr	r1, [pc, #136]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e032      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4916      	ldr	r1, [pc, #88]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d5e:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	490e      	ldr	r1, [pc, #56]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d72:	f000 f821 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	490a      	ldr	r1, [pc, #40]	@ (8001dac <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	5ccb      	ldrb	r3, [r1, r3]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_RCC_ClockConfig+0x1d0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fd8c 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08002a1c 	.word	0x08002a1c
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d002      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x30>
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d003      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0x36>
 8001de6:	e027      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dea:	613b      	str	r3, [r7, #16]
      break;
 8001dec:	e027      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	0c9b      	lsrs	r3, r3, #18
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0c5b      	lsrs	r3, r3, #17
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	4a11      	ldr	r2, [pc, #68]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e1a:	fb03 f202 	mul.w	r2, r3, r2
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e004      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	613b      	str	r3, [r7, #16]
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3a:	613b      	str	r3, [r7, #16]
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	693b      	ldr	r3, [r7, #16]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	007a1200 	.word	0x007a1200
 8001e54:	08002a34 	.word	0x08002a34
 8001e58:	08002a44 	.word	0x08002a44
 8001e5c:	003d0900 	.word	0x003d0900

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b02      	ldr	r3, [pc, #8]	@ (8001e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	20000000 	.word	0x20000000

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e78:	f7ff fff2 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4903      	ldr	r1, [pc, #12]	@ (8001e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	08002a2c 	.word	0x08002a2c

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	0adb      	lsrs	r3, r3, #11
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	@ (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08002a2c 	.word	0x08002a2c

08001ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <RCC_Delay+0x34>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <RCC_Delay+0x38>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0a5b      	lsrs	r3, r3, #9
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee0:	bf00      	nop
  }
  while (Delay --);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e5a      	subs	r2, r3, #1
 8001ee6:	60fa      	str	r2, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <RCC_Delay+0x1c>
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	10624dd3 	.word	0x10624dd3

08001f00 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e062      	b.n	8001fde <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7fe fb8b 	bl	8000648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2224      	movs	r2, #36	@ 0x24
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fca0 	bl	8002890 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f6e:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 020f 	bic.w	r2, r2, #15
 8001f7e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6919      	ldr	r1, [r3, #16]
 8001f86:	7afa      	ldrb	r2, [r7, #11]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f9e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68d9      	ldr	r1, [r3, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fbe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0ba      	sub	sp, #232	@ 0xe8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800201a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10f      	bne.n	800204e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800202e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <HAL_UART_IRQHandler+0x66>
 800203a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fb63 	bl	8002712 <UART_Receive_IT>
      return;
 800204c:	e25b      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800204e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80de 	beq.w	8002214 <HAL_UART_IRQHandler+0x22c>
 8002058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d106      	bne.n	8002072 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002068:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80d1 	beq.w	8002214 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_UART_IRQHandler+0xae>
 800207e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_UART_IRQHandler+0xd2>
 80020a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	f043 0202 	orr.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_UART_IRQHandler+0xf6>
 80020c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f043 0204 	orr.w	r2, r3, #4
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d011      	beq.n	800210e <HAL_UART_IRQHandler+0x126>
 80020ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f043 0208 	orr.w	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 81f2 	beq.w	80024fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_UART_IRQHandler+0x14e>
 8002124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 faee 	bl	8002712 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf14      	ite	ne
 8002144:	2301      	movne	r3, #1
 8002146:	2300      	moveq	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <HAL_UART_IRQHandler+0x17a>
 800215a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d04f      	beq.n	8002202 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f9f8 	bl	8002558 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d041      	beq.n	80021fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3314      	adds	r3, #20
 800217c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002180:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002184:	e853 3f00 	ldrex	r3, [r3]
 8002188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800218c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3314      	adds	r3, #20
 800219e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80021a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80021a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80021ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80021b2:	e841 2300 	strex	r3, r2, [r1]
 80021b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80021ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1d9      	bne.n	8002176 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d013      	beq.n	80021f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ce:	4a7e      	ldr	r2, [pc, #504]	@ (80023c8 <HAL_UART_IRQHandler+0x3e0>)
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fd92 	bl	8000d00 <HAL_DMA_Abort_IT>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021ec:	4610      	mov	r0, r2
 80021ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f0:	e00e      	b.n	8002210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f99c 	bl	8002530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	e00a      	b.n	8002210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f998 	bl	8002530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002200:	e006      	b.n	8002210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f994 	bl	8002530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800220e:	e175      	b.n	80024fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002210:	bf00      	nop
    return;
 8002212:	e173      	b.n	80024fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	2b01      	cmp	r3, #1
 800221a:	f040 814f 	bne.w	80024bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800221e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8148 	beq.w	80024bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800222c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8141 	beq.w	80024bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 80b6 	beq.w	80023cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800226c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8145 	beq.w	8002500 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800227a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800227e:	429a      	cmp	r2, r3
 8002280:	f080 813e 	bcs.w	8002500 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800228a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b20      	cmp	r3, #32
 8002294:	f000 8088 	beq.w	80023a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022a6:	e853 3f00 	ldrex	r3, [r3]
 80022aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80022ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80022c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022d4:	e841 2300 	strex	r3, r2, [r1]
 80022d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1d9      	bne.n	8002298 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3314      	adds	r3, #20
 80022ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3314      	adds	r3, #20
 8002304:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002308:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800230c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002310:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002314:	e841 2300 	strex	r3, r2, [r1]
 8002318:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800231a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e1      	bne.n	80022e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3314      	adds	r3, #20
 8002326:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800232a:	e853 3f00 	ldrex	r3, [r3]
 800232e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002336:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3314      	adds	r3, #20
 8002340:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002344:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002346:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002348:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800234a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800234c:	e841 2300 	strex	r3, r2, [r1]
 8002350:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e3      	bne.n	8002320 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	330c      	adds	r3, #12
 800236c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002370:	e853 3f00 	ldrex	r3, [r3]
 8002374:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002378:	f023 0310 	bic.w	r3, r3, #16
 800237c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800238a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800238c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002390:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002392:	e841 2300 	strex	r3, r2, [r1]
 8002396:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1e3      	bne.n	8002366 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fc70 	bl	8000c88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4619      	mov	r1, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8bf 	bl	8002542 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023c4:	e09c      	b.n	8002500 <HAL_UART_IRQHandler+0x518>
 80023c6:	bf00      	nop
 80023c8:	0800261d 	.word	0x0800261d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 808e 	beq.w	8002504 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8089 	beq.w	8002504 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fc:	e853 3f00 	ldrex	r3, [r3]
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002408:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002416:	647a      	str	r2, [r7, #68]	@ 0x44
 8002418:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800241c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e3      	bne.n	80023f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3314      	adds	r3, #20
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	e853 3f00 	ldrex	r3, [r3]
 8002438:	623b      	str	r3, [r7, #32]
   return(result);
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3314      	adds	r3, #20
 800244a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800244e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002456:	e841 2300 	strex	r3, r2, [r1]
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800245c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1e3      	bne.n	800242a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	330c      	adds	r3, #12
 8002476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	e853 3f00 	ldrex	r3, [r3]
 800247e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0310 	bic.w	r3, r3, #16
 8002486:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	330c      	adds	r3, #12
 8002490:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002494:	61fa      	str	r2, [r7, #28]
 8002496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	617b      	str	r3, [r7, #20]
   return(result);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e3      	bne.n	8002470 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f844 	bl	8002542 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024ba:	e023      	b.n	8002504 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_UART_IRQHandler+0x4f4>
 80024c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f8b5 	bl	8002644 <UART_Transmit_IT>
    return;
 80024da:	e014      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00e      	beq.n	8002506 <HAL_UART_IRQHandler+0x51e>
 80024e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f8f4 	bl	80026e2 <UART_EndTransmit_IT>
    return;
 80024fa:	e004      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
    return;
 80024fc:	bf00      	nop
 80024fe:	e002      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
      return;
 8002500:	bf00      	nop
 8002502:	e000      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
      return;
 8002504:	bf00      	nop
  }
}
 8002506:	37e8      	adds	r7, #232	@ 0xe8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002558:	b480      	push	{r7}
 800255a:	b095      	sub	sp, #84	@ 0x54
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	330c      	adds	r3, #12
 8002566:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256a:	e853 3f00 	ldrex	r3, [r3]
 800256e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002572:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002580:	643a      	str	r2, [r7, #64]	@ 0x40
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002584:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002586:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002588:	e841 2300 	strex	r3, r2, [r1]
 800258c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800258e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e5      	bne.n	8002560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3314      	adds	r3, #20
 80025b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025bc:	e841 2300 	strex	r3, r2, [r1]
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e5      	bne.n	8002594 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d119      	bne.n	8002604 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	60bb      	str	r3, [r7, #8]
   return(result);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f023 0310 	bic.w	r3, r3, #16
 80025e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025f0:	61ba      	str	r2, [r7, #24]
 80025f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f4:	6979      	ldr	r1, [r7, #20]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	e841 2300 	strex	r3, r2, [r1]
 80025fc:	613b      	str	r3, [r7, #16]
   return(result);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e5      	bne.n	80025d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002612:	bf00      	nop
 8002614:	3754      	adds	r7, #84	@ 0x54
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff7a 	bl	8002530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b21      	cmp	r3, #33	@ 0x21
 8002656:	d13e      	bne.n	80026d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002660:	d114      	bne.n	800268c <UART_Transmit_IT+0x48>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d110      	bne.n	800268c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800267e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	1c9a      	adds	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	621a      	str	r2, [r3, #32]
 800268a:	e008      	b.n	800269e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	1c59      	adds	r1, r3, #1
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6211      	str	r1, [r2, #32]
 8002696:	781a      	ldrb	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4619      	mov	r1, r3
 80026ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
  }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ff02 	bl	800250c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b08c      	sub	sp, #48	@ 0x30
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b22      	cmp	r3, #34	@ 0x22
 8002724:	f040 80ae 	bne.w	8002884 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002730:	d117      	bne.n	8002762 <UART_Receive_IT+0x50>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d113      	bne.n	8002762 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002750:	b29a      	uxth	r2, r3
 8002752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	1c9a      	adds	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002760:	e026      	b.n	80027b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002766:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002774:	d007      	beq.n	8002786 <UART_Receive_IT+0x74>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <UART_Receive_IT+0x82>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e008      	b.n	80027a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4619      	mov	r1, r3
 80027be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d15d      	bne.n	8002880 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0220 	bic.w	r2, r2, #32
 80027d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	2b01      	cmp	r3, #1
 8002808:	d135      	bne.n	8002876 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	613b      	str	r3, [r7, #16]
   return(result);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f023 0310 	bic.w	r3, r3, #16
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002830:	623a      	str	r2, [r7, #32]
 8002832:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002834:	69f9      	ldr	r1, [r7, #28]
 8002836:	6a3a      	ldr	r2, [r7, #32]
 8002838:	e841 2300 	strex	r3, r2, [r1]
 800283c:	61bb      	str	r3, [r7, #24]
   return(result);
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e5      	bne.n	8002810 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b10      	cmp	r3, #16
 8002850:	d10a      	bne.n	8002868 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800286c:	4619      	mov	r1, r3
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fe67 	bl	8002542 <HAL_UARTEx_RxEventCallback>
 8002874:	e002      	b.n	800287c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fe51 	bl	800251e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e002      	b.n	8002886 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3730      	adds	r7, #48	@ 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80028ca:	f023 030c 	bic.w	r3, r3, #12
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2c      	ldr	r2, [pc, #176]	@ (80029a4 <UART_SetConfig+0x114>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d103      	bne.n	8002900 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028f8:	f7ff fad0 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	e002      	b.n	8002906 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002900:	f7ff fab8 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8002904:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009a      	lsls	r2, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	4a22      	ldr	r2, [pc, #136]	@ (80029a8 <UART_SetConfig+0x118>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	0119      	lsls	r1, r3, #4
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	009a      	lsls	r2, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	fbb2 f2f3 	udiv	r2, r2, r3
 800293c:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <UART_SetConfig+0x118>)
 800293e:	fba3 0302 	umull	r0, r3, r3, r2
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2064      	movs	r0, #100	@ 0x64
 8002946:	fb00 f303 	mul.w	r3, r0, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	3332      	adds	r3, #50	@ 0x32
 8002950:	4a15      	ldr	r2, [pc, #84]	@ (80029a8 <UART_SetConfig+0x118>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800295c:	4419      	add	r1, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fbb2 f2f3 	udiv	r2, r2, r3
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <UART_SetConfig+0x118>)
 8002976:	fba3 0302 	umull	r0, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2064      	movs	r0, #100	@ 0x64
 800297e:	fb00 f303 	mul.w	r3, r0, r3
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	3332      	adds	r3, #50	@ 0x32
 8002988:	4a07      	ldr	r2, [pc, #28]	@ (80029a8 <UART_SetConfig+0x118>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	440a      	add	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40013800 	.word	0x40013800
 80029a8:	51eb851f 	.word	0x51eb851f

080029ac <memset>:
 80029ac:	4603      	mov	r3, r0
 80029ae:	4402      	add	r2, r0
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d100      	bne.n	80029b6 <memset+0xa>
 80029b4:	4770      	bx	lr
 80029b6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ba:	e7f9      	b.n	80029b0 <memset+0x4>

080029bc <__libc_init_array>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	2600      	movs	r6, #0
 80029c0:	4d0c      	ldr	r5, [pc, #48]	@ (80029f4 <__libc_init_array+0x38>)
 80029c2:	4c0d      	ldr	r4, [pc, #52]	@ (80029f8 <__libc_init_array+0x3c>)
 80029c4:	1b64      	subs	r4, r4, r5
 80029c6:	10a4      	asrs	r4, r4, #2
 80029c8:	42a6      	cmp	r6, r4
 80029ca:	d109      	bne.n	80029e0 <__libc_init_array+0x24>
 80029cc:	f000 f81a 	bl	8002a04 <_init>
 80029d0:	2600      	movs	r6, #0
 80029d2:	4d0a      	ldr	r5, [pc, #40]	@ (80029fc <__libc_init_array+0x40>)
 80029d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002a00 <__libc_init_array+0x44>)
 80029d6:	1b64      	subs	r4, r4, r5
 80029d8:	10a4      	asrs	r4, r4, #2
 80029da:	42a6      	cmp	r6, r4
 80029dc:	d105      	bne.n	80029ea <__libc_init_array+0x2e>
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e4:	4798      	blx	r3
 80029e6:	3601      	adds	r6, #1
 80029e8:	e7ee      	b.n	80029c8 <__libc_init_array+0xc>
 80029ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ee:	4798      	blx	r3
 80029f0:	3601      	adds	r6, #1
 80029f2:	e7f2      	b.n	80029da <__libc_init_array+0x1e>
 80029f4:	08002a48 	.word	0x08002a48
 80029f8:	08002a48 	.word	0x08002a48
 80029fc:	08002a48 	.word	0x08002a48
 8002a00:	08002a4c 	.word	0x08002a4c

08002a04 <_init>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr

08002a10 <_fini>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	bf00      	nop
 8002a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a16:	bc08      	pop	{r3}
 8002a18:	469e      	mov	lr, r3
 8002a1a:	4770      	bx	lr
